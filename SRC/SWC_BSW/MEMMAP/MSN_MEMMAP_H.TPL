/*INSERTION_TRADOIL*/
/******************************************************************************/
/*                                                                            */
/* !Layer           : STD                                                     */
/*                                                                            */
/* !Component       : MEMMAP                                                  */
/* !Description     : MEMMAP Configuration                                    */
/*                                                                            */
/* !File            : MSN_MEMMAP_H.TPL                                        */
/*                                                                            */
/* !Scope           : Public                                                  */
/*                                                                            */
/* !Target          : Genecode Tool v2.5.0.0                                  */
/*                                                                            */
/* !Vendor          : Valeo                                                   */
/*                                                                            */
/* COPYRIGHT 2009 VALEO                                                       */
/* all rights reserved                                                        */
/*                                                                            */
/******************************************************************************/
/* PVCS Information                                                           */
/* $Archive::   I:/PROJETS/LIBEMB/LOG/DIVERS/MEMMAP/LOG/MSN_MEMMAP_H.TPv     $*/
/* $Revision::   1.1      $$Author::   lvoilmy        $$Date::   10 Oct 2012 $*/
/******************************************************************************/

.MEMMAP_CFG WHERE (GENERATE_MEMMAP_FILE_PER_MSN == TRUE)
{
.MEMMAP_MSN AS msn ORDERBY(INDEX)
{
WriteToFile(msn,"_MemMap",".h")

'/******************************************************************************/
/*                                                                            */
/* !Layer           : STD                                                     */
/*                                                                            */
/* !Component       : MEMMAP                                                  */
/* !Description     : MEMMAP Configuration                                    */
/*                                                                            */
/* !File            : `msn'_MEMMAP.H                                          */
/*                                                                            */
/* !Scope           : Public                                                  */
/*                                                                            */
/* !Target          :                                                         */
/*                                                                            */
/* !Vendor          : Valeo                                                   */
/*                                                                            */
/* Coding language  : C                                                       */
/*                                                                            */
/* COPYRIGHT 2009 VALEO                                                       */
/* all rights reserved                                                        */
/*                                                                            */
/******************************************************************************/
/* PVCS Information                                                           */
/* $Arc`'hive::                                                                $*/
/* $Rev`'ision::            $$Au`'thor::                  $$Da`'te::               $*/
/******************************************************************************/
/* `Date()': generated by Genecode  `Version()'                        */
/* From Source Template : MSN_MEMMAP_H.TPL                                    */
/******************************************************************************/


`

/******************************************************************************/
/*          SPEED_AND_UNSAFE  Mode Code Generation                            */
/******************************************************************************/
.MEMMAP_CFG WHERE (OPTIMIZATION = SPEED_AND_UNSAFE)
{
'
/******************************************************************************/
/*          MEMMAP selected mode:  SPEED_AND_UNSAFE                           */
/******************************************************************************/

/* The following if is used only due to automatic generation */
#if FALSE

/* Project section mappings */
`
msn
 {
"/* !Comment: " msn " Section allocation */
"
   SECTION AS memmap
   {
      msn.REALLOC AS realloc WHERE ((realloc.SECTION == memmap) and ( realloc.TO_SECTION.CODE_TO_INCLUDE == "TRUE") )
      {
            "#elif defined   " msn "_START_" msn.PREFIX  memmap"
   #undef          " msn "_START_" msn.PREFIX  memmap"
   "  TO_SECTION.START"
"
            "#elif defined   " msn "_STOP_"  msn.PREFIX  memmap"
   #undef          " msn "_STOP_"  msn.PREFIX  memmap"
   "  TO_SECTION.STOP"
"
      }
      WHERE ((msn.REALLOC AS realloc WHERE (realloc.SECTION == memmap) COUNT == 0) and ( memmap.CODE_TO_INCLUDE == "TRUE") )
      {
            "#elif defined   " msn "_START_" msn.PREFIX  memmap "
   #undef          " msn "_START_" msn.PREFIX  memmap"
   "  memmap.START"
"
            "#elif defined   " msn "_STOP_"  msn.PREFIX  memmap "
   #undef          " msn "_STOP_" msn.PREFIX  memmap"
   "  memmap.STOP "
"
      }
    }
 }


'
#endif
`
}

/******************************************************************************/
/*          SAFE  Mode Code Generation                                        */
/******************************************************************************/
.MEMMAP_CFG WHERE (OPTIMIZATION = SAFE)
{
'
/******************************************************************************/
/*          MEMMAP selected mode:  SAFE                                       */
/******************************************************************************/
#define MEMMAP_ERROR

/* The following if is used only due to automatic generation */
#if !defined MEMMAP_ERROR

/* Project section mappings */
`
msn
{
"/* !Comment: " msn " Section allocation */
"
   SECTION AS memmap
   {
      msn.REALLOC AS realloc WHERE (realloc.SECTION == memmap)
      {
            "#elif defined   " msn "_START_" msn.PREFIX memmap
         "
"        "   #undef  " msn "_START_" msn.PREFIX memmap "
"        "   #define START_" TO_SECTION "_SECTION
"        "#elif defined   " msn "_STOP_" msn.PREFIX   memmap "
"        "   #undef  " msn "_STOP_" msn.PREFIX memmap "
"        "   #define STOP_" TO_SECTION "_SECTION
"
      }
      WHERE (msn.REALLOC AS realloc WHERE (realloc.SECTION == memmap) COUNT == 0)
      {
            "#elif defined   " msn "_START_" msn.PREFIX   memmap
         "
"        "   #undef  " msn "_START_" msn.PREFIX memmap "
"        "   #define START_" memmap "_SECTION
"        "#elif defined   " msn "_STOP_" msn.PREFIX   memmap "
"        "   #undef  " msn "_STOP_" msn.PREFIX memmap "
"        "   #define STOP_" memmap "_SECTION
"
      }
   }

}


'
#endif

/* ECU specific section mappings */
#ifndef MEMMAP_START_DONE

`
msn
 {
"/* The following if is used only due to automatic generation */
"
"
#if FALSE
"
   SECTION AS memmap
   {
     msn.REALLOC AS realloc WHERE (realloc.SECTION == memmap)
     {
"/* !Comment: " memmap " Start Section treatment */
"
      "   #elif defined   START_"realloc.TO_SECTION"_SECTION
	  "


   WHERE(realloc.TO_SECTION.START!="")
   {
"

      "realloc.TO_SECTION.START"
"
   }
"
      #undef  MEMMAP_ERROR
      #define MEMMAP_START_DONE
"
     }
	 WHERE (msn.REALLOC AS realloc WHERE (realloc.SECTION == memmap) COUNT == 0)
    {
"/* !Comment: " memmap " Start Section treatment */
"
      "   #elif defined   START_"memmap"_SECTION
	  "

  WHERE(memmap.START!="")
   {
"

      "memmap.START"
"
   }
"
      #undef  MEMMAP_ERROR
      #define MEMMAP_START_DONE
"
    }
	}
}

'
   #endif

#else   /* if MEMMAP_START_DONE is not defined */

`
msn
 {
"/* The following if is used only due to automatic generation */
"
"
#if FALSE
"
   SECTION AS memmap
   {
    msn.REALLOC AS realloc WHERE (realloc.SECTION == memmap)
     {
"/* !Comment: " memmap " Stop Section treatment */
"
      "   #elif defined   STOP_"realloc.TO_SECTION  "_SECTION && defined  START_"realloc.TO_SECTION"_SECTION
	  "

   WHERE(realloc.TO_SECTION.STOP!="")
   {
"

      "realloc.TO_SECTION.STOP"
"
   }

"
      #undef START_"    realloc.TO_SECTION"_SECTION
      #undef STOP_"     realloc.TO_SECTION"_SECTION
      #undef MEMMAP_ERROR
      #undef MEMMAP_START_DONE
"
     }
     WHERE (msn.REALLOC AS realloc WHERE (realloc.SECTION == memmap) COUNT == 0)
    {
"/* !Comment: " memmap " Stop Section treatment */
"
      "   #elif defined   STOP_"memmap  "_SECTION && defined  START_"memmap"_SECTION
	  "

   WHERE(memmap.STOP!="")
   {
"

      "memmap.STOP"
"
   }

"
      #undef START_"  memmap"_SECTION
      #undef STOP_"   memmap"_SECTION
      #undef MEMMAP_ERROR
      #undef MEMMAP_START_DONE
"
    }
   }
}

'
   #endif
#endif

#if defined MEMMAP_ERROR
   #error MEMMAP-E201 : Bad memory allocation into `msn'_MemMap.h
#endif

`
}

/******************************************************************************/
/*          DEBUG  Mode Code Generation                                       */
/******************************************************************************/
.MEMMAP_CFG WHERE (OPTIMIZATION = DEBUG)
{
'
/******************************************************************************/
/*          MEMMAP selected mode:  DEBUG                                      */
/******************************************************************************/

`
msn
{
   SECTION AS memmap
   {
       "#define  " msn "_START_"msn.PREFIX memmap "_ID  "   msn{MSN_COUNTER_LIST MAX+1}"
"      "#define  " msn "_STOP_"msn.PREFIX memmap "_ID   "   msn{MSN_COUNTER_LIST MAX+2}"
"
       {
           msn{MSN_COUNTER_LIST MAX+2 INTO MSN_COUNTER_LIST}
       }
   }
}

'

#define MEMMAP_ERROR

/* The following if is used only due to automatic generation */
#if !defined MEMMAP_ERROR

/* Project section mappings */
`
msn
{
"/* !Comment: " msn " Section allocation */
"
   SECTION AS memmap
   {
      msn.REALLOC AS realloc WHERE (realloc.SECTION == memmap)
      {
         "#elif defined   " msn "_STOP_" msn.PREFIX   memmap "
"        "   #if ((defined MEMMAP_LAST_USED_SECTION) &&  (MEMMAP_LAST_USED_SECTION == " msn "_START_" msn.PREFIX memmap "_ID))
"        "      #undef  " msn "_STOP_" msn.PREFIX memmap "
"        "      #undef  MEMMAP_START_DONE
"        WHERE(TO_SECTION.STOP!="")
         {
         "      "TO_SECTION.STOP"
"
         }
         "      #undef  MEMMAP_ERROR
"        "   #else
"        "      #error MEMMAP-E101 :  " msn "_STOP_" msn.PREFIX   memmap " end section is used before " msn "_START_" msn.PREFIX   memmap "
"        "   #endif
"        "   #undef MEMMAP_LAST_USED_SECTION
"        "   #define MEMMAP_LAST_USED_SECTION  " msn "_STOP_" msn.PREFIX   memmap "_ID
"        "#elif defined   " msn "_START_" msn.PREFIX   memmap"
"        "   #if FALSE
"
		  .MEMMAP_MSN AS msn2 WHERE(msn2 == msn)
          {
            SECTION AS memmap2 WHERE(memmap != memmap2 )
            {
               "   #elif ((defined MEMMAP_LAST_USED_SECTION) &&  (MEMMAP_LAST_USED_SECTION ==   " msn2 "_START_" msn2.PREFIX   memmap2"_ID))
"              "      #error MEMMAP-E102 : two section memory have been started: " msn "_START_" msn.PREFIX   memmap" and " msn "_START_" msn.PREFIX   memmap2" (a STOP section is missing).
"
            }
          }


         "   #elif defined MEMMAP_START_DONE
"        "      #error MEMMAP-E103 : two same start section memory have been started : " msn "_START_" msn.PREFIX   memmap" and " msn "_START_" msn.PREFIX   memmap" (a STOP section is missing).
"        "   #else
"        WHERE(TO_SECTION.START!="")
         {
         "      "TO_SECTION.START"
"
         }
         "      #undef  MEMMAP_ERROR
"        "      #define MEMMAP_START_DONE
"        "      #undef  " msn "_START_" msn.PREFIX memmap "
"        "   #endif
"        "   #undef MEMMAP_LAST_USED_SECTION
"        "   #define MEMMAP_LAST_USED_SECTION  " msn "_START_" msn.PREFIX   memmap"_ID
"
      }
      WHERE (msn.REALLOC AS realloc WHERE (realloc.SECTION == memmap) COUNT == 0)
      {
         "#elif defined   " msn "_STOP_" msn.PREFIX   memmap "
"        "   #if ((defined MEMMAP_LAST_USED_SECTION) &&  (MEMMAP_LAST_USED_SECTION ==  " msn "_START_" msn.PREFIX memmap "_ID))
"        "      #undef  " msn "_STOP_" msn.PREFIX memmap "
"        "      #undef  MEMMAP_START_DONE
"        WHERE(memmap.STOP!="")
         {
         "      "memmap.STOP"
"
         }
         "      #undef  MEMMAP_ERROR
"        "   #else
"        "      #error MEMMAP-E101 :  " msn "_STOP_" msn.PREFIX   memmap " end section is used before " msn "_START_" msn.PREFIX   memmap "
"        "   #endif
"        "   #undef MEMMAP_LAST_USED_SECTION
"        "   #define MEMMAP_LAST_USED_SECTION  " msn "_STOP_" msn.PREFIX   memmap "_ID
"        "#elif defined   " msn "_START_" msn.PREFIX   memmap"
"        "   #if FALSE
"
		  .MEMMAP_MSN AS msn2 WHERE(msn2 == msn)
          {
            SECTION AS memmap2 WHERE(memmap != memmap2 )
            {
               "   #elif ((defined MEMMAP_LAST_USED_SECTION) &&  (MEMMAP_LAST_USED_SECTION ==   " msn2 "_START_" msn2.PREFIX   memmap2"_ID))
"              "      #error MEMMAP-E102 : two section memory have been started: " msn "_START_" msn.PREFIX   memmap" and " msn "_START_" msn.PREFIX   memmap2" (a STOP section is missing).
"
            }
          }

         "   #elif defined MEMMAP_START_DONE
"        "      #error MEMMAP-E103 : two same start section memory have been started : " msn "_START_" msn.PREFIX   memmap" and " msn "_START_" msn.PREFIX   memmap" (a STOP section is missing).
"        "   #else
"        WHERE(memmap.START!="")
         {
         "      "memmap.START"
"
         }
         "      #undef  MEMMAP_ERROR
"        "      #define MEMMAP_START_DONE
"        "      #undef  " msn "_START_" msn.PREFIX memmap "
"        "   #endif
"        "   #undef MEMMAP_LAST_USED_SECTION
"        "   #define MEMMAP_LAST_USED_SECTION  " msn "_START_" msn.PREFIX   memmap"_ID
"
      }
   }
}



'
#endif


#if defined MEMMAP_ERROR
   #if !defined MEMMAP_LAST_USED_SECTION
      #error MEMMAP-E104 : unknow memory section
`
msn
{
   SECTION AS memmap  CONCATE
   {
      "   #elif  (MEMMAP_LAST_USED_SECTION == " msn "_START_" msn.PREFIX   memmap "_ID)
"     "      #error MEMMAP-E105 : unknow memory section after the  " msn "_START_" msn.PREFIX   memmap" one
"     "   #elif  (MEMMAP_LAST_USED_SECTION == " msn "_STOP_" msn.PREFIX   memmap "_ID)
"     "      #error MEMMAP-E105 : unknow memory section after the  " msn "_STOP_" msn.PREFIX   memmap" one
"
   }
}
'
   #else
      #error MEMMAP-E104 : unknow memory section
   #endif  /* #if !defined MEMMAP_LAST_USED_SECTION */
#endif   /* #if defined MEMMAP_ERROR */
   `

   msn.SECTION AS memmap
   {
"	    
#ifdef " msn "_START_"msn.PREFIX memmap "_ID
#undef  " msn "_START_"msn.PREFIX memmap "_ID 
#endif	

#ifdef " msn "_STOP_"msn.PREFIX memmap "_ID
#undef  " msn "_STOP_"msn.PREFIX memmap "_ID  
#endif
" 
   }
   
 
} 
'
/*------------------------------- end of file --------------------------------*/
`
/*------------------------------- end of file --------------------------------*/
}
}
